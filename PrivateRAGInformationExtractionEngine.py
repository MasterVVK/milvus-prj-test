import dspy
import requests
from pymilvus import connections, utility, Collection, CollectionSchema, FieldSchema, DataType, Index
from dspy.retrieve.milvus_rm import MilvusRM  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Milvus –∫–∞–∫ Retriever Model

# ========== 1. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MILVUS ==========
MILVUS_HOST = "localhost"
MILVUS_PORT = "19530"
COLLECTION_NAME = "document_parts"

connections.connect(alias="default", host=MILVUS_HOST, port=MILVUS_PORT)

# ========== 2. –°–û–ó–î–ê–ù–ò–ï –ö–û–õ–õ–ï–ö–¶–ò–ò ==========
if utility.has_collection(COLLECTION_NAME):
    utility.drop_collection(COLLECTION_NAME)
    print(f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è {COLLECTION_NAME} —É–¥–∞–ª–µ–Ω–∞!")

fields = [
    FieldSchema(name="id", dtype=DataType.INT64, is_primary=True, auto_id=True),
    FieldSchema(name="text", dtype=DataType.VARCHAR, max_length=1024),  # –•—Ä–∞–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    FieldSchema(name="embedding", dtype=DataType.FLOAT_VECTOR, dim=1024)  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
]

schema = CollectionSchema(fields, description="–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
collection = Collection(name=COLLECTION_NAME, schema=schema)

print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {COLLECTION_NAME} —Å–æ–∑–¥–∞–Ω–∞ —Å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é 1024!")

# ========== 3. –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–ê ==========
index_params = {
    "index_type": "IVF_FLAT",
    "metric_type": "L2",
    "params": {"nlist": 128}
}

collection.create_index(field_name="embedding", index_params=index_params)
print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è {COLLECTION_NAME}!")


# ========== 4. –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –≠–ú–ë–ï–î–î–ò–ù–ì–û–í ==========
def generate_embedding(text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 1024-–º–µ—Ä–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Ollama"""
    try:
        response = requests.post(
            "http://localhost:11434/api/embeddings",
            json={"model": "mxbai-embed-large", "prompt": text}  # üí° `prompt` —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞
        )
        response_data = response.json()

        if "embedding" not in response_data:
            print(f"‚ùå –û—à–∏–±–∫–∞! API Ollama –Ω–µ –≤–µ—Ä–Ω—É–ª 'embedding'. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{response_data}")
            return None

        embedding = response_data["embedding"]
        return embedding if isinstance(embedding, list) else None  # ‚úÖ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ float

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ollama: {e}")
        return None
    except requests.exceptions.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON! –°–µ—Ä–≤–µ—Ä Ollama –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{response.text}")
        return None


# ========== 5. –§–£–ù–ö–¶–ò–Ø –ò–ù–î–ï–ö–°–ê–¶–ò–ò –î–û–ö–£–ú–ï–ù–¢–û–í ==========
def index_documents(docs):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Milvus"""
    embeddings = []
    texts = []

    for text in docs:
        embedding = generate_embedding(text)
        if embedding is not None:
            embeddings.append(embedding)
            texts.append(text)
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {text[:50]}... (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥)")

    if not embeddings:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–∏ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω.")
        return

    collection.insert([texts, embeddings])
    print(f"‚úÖ {len(embeddings)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {COLLECTION_NAME}!")

    collection.load()
    print(f"üì• –ö–æ–ª–ª–µ–∫—Ü–∏—è {COLLECTION_NAME} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å!")


# ========== 6. –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –í MILVUS ==========
def search_documents(query):
    """–ü–æ–∏—Å–∫ –≤ Milvus"""
    embedding = generate_embedding(query)
    if embedding is None:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.")
        return

    collection.load()
    search_results = collection.search(
        data=[embedding],
        anns_field="embedding",
        param={"metric_type": "L2", "params": {"nprobe": 10}},
        limit=5
    )

    for i, result in enumerate(search_results[0]):
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç {i + 1}: {result.id}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {result.distance}")


# ========== 7. –ù–ê–°–¢–†–û–ô–ö–ê LLM –∏ RM ==========
lm = dspy.LM("openai/gemma:2b", api_base="http://localhost:11434")


class CustomMilvusRM(MilvusRM):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π Milvus Retriever —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ Ollama"""

    def __init__(self, collection_name):
        super().__init__(collection_name=collection_name)
        self.embedding_function = generate_embedding  # üí° –£–∫–∞–∑—ã–≤–∞–µ–º Ollama –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤

    def forward(self, query):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º forward, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ollama"""
        embedding = self.embedding_function(query)
        if embedding is None:
            return []
        return super().forward(query)


milvus_retriever = CustomMilvusRM(collection_name=COLLECTION_NAME)

dspy.configure(lm=lm, rm=milvus_retriever)  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Milvus –∫–∞–∫ Retriever Model


# ========== 8. DSPy –ö–õ–ê–°–° –î–õ–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –°–û–ë–´–¢–ò–ô ==========
class Event(dspy.Signature):
    description = dspy.InputField(desc="Textual description of the event, including name, location, and dates")
    event_name = dspy.OutputField(desc="Name of the event")
    location = dspy.OutputField(desc="Location of the event")
    start_date = dspy.OutputField(desc="Start date of the event, YYYY-MM-DD")
    end_date = dspy.OutputField(desc="End date of the event, YYYY-MM-DD")


class EventExtractor(dspy.Module):
    def __init__(self):
        super().__init__()
        self.retriever = dspy.Retrieve(k=3)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Milvus –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.predict = dspy.Predict(Event)

    def forward(self, query: str):
        results = self.retriever.forward(query)
        events = [self.predict(description=doc) for doc in results.passages]
        return events


# ========== 9. –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï ==========
documents = [
    "Blockchain Expo Global, happening May 20-22, 2024, in Dubai, UAE, focuses on blockchain technology's applications.",
    "The AI Innovations Summit, scheduled for 15-17 September 2024 in London, UK, aims at professionals and researchers advancing AI.",
    "Berlin, Germany will host the CyberSecurity World Conference between November 5th and 7th, 2024."
]

# ========== 10. –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö ==========
if __name__ == "__main__":
    print("\n‚û°Ô∏è –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
    index_documents(documents)

    print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É...")
    search_documents("Latest blockchain trends in Europe")

    print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
    extractor = EventExtractor()
    results = extractor.forward("Blockchain events close to Europe")
    print(results)
